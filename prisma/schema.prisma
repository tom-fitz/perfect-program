// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // Uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // Uses a direct connection
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean    @default(false)
  accounts      Account[]
  sessions      Session[]
  clientOf      User?      @relation("AdminClient", fields: [adminId], references: [id])
  adminId       String?
  clients       User[]     @relation("AdminClient")
  workouts      Workout[]  @relation("AssignedWorkouts")
  messages      Message[]  @relation("UserMessages")
  createdWorkouts Workout[] @relation("CreatedWorkouts")
  createdExercises Exercise[]  @relation("CreatedExercises")
  billing       Billing[]
  createdTemplates BillingTemplate[] @relation("CreatedTemplates")
  createdPrograms Program[] @relation("CreatedPrograms")
  assignedPrograms Program[] @relation("AssignedPrograms")
  createdAt     DateTime   @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  videoUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation("CreatedExercises", fields: [userId], references: [id])
  userId      String
  workouts    WorkoutExercise[]
  
  // New fields
  bodyPart    BodyPart  @relation(fields: [bodyPartId], references: [id])
  bodyPartId  String
  equipment   Equipment[] // Many-to-many
  type        ExerciseType @relation(fields: [typeId], references: [id])
  typeId      String
  difficulty  Difficulty @default(BEGINNER)
}

model BodyPart {
  id        String     @id @default(cuid())
  name      String     @unique
  exercises Exercise[]
}

model Equipment {
  id        String     @id @default(cuid())
  name      String     @unique
  exercises Exercise[] // Many-to-many
}

model ExerciseType {
  id        String     @id @default(cuid())
  name      String     @unique
  exercises Exercise[]
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Program {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  workouts    ProgramWorkout[]
  createdBy   User      @relation("CreatedPrograms", fields: [createdById], references: [id])
  createdById String
  assignedTo  User[]    @relation("AssignedPrograms")
  duration    Int       // Program duration in weeks
  difficulty  Difficulty
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([createdById])
}

model ProgramWorkout {
  id        String   @id @default(cuid())
  program   Program  @relation(fields: [programId], references: [id])
  programId String
  workout   Workout  @relation(fields: [workoutId], references: [id])
  workoutId String
  weekNumber Int     // Week in the program
  dayNumber  Int     // Day of the week
  order     Int      // Order within the day

  @@unique([programId, weekNumber, dayNumber, order])
  @@index([programId])
  @@index([workoutId])
}

model Workout {
  id          String     @id @default(cuid())
  name        String
  description String?
  duration    Int
  difficulty  Difficulty @default(BEGINNER)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdBy   User       @relation("CreatedWorkouts", fields: [createdById], references: [id])
  createdById String
  exercises   WorkoutExercise[]
  programs    ProgramWorkout[]
  assignedTo  User[]     @relation("AssignedWorkouts")

  @@index([createdById])
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  workoutId  String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets       Int
  reps       Int?     // null for time-based exercises
  duration   Int?     // in seconds, null for rep-based exercises
  order      Int      // for exercise sequence
  notes      String?
  restPeriod Int      // Add this field (in seconds)

  @@index([workoutId])
  @@index([exerciseId])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  user      User     @relation("UserMessages", fields: [userId], references: [id])
  userId    String
  read      Boolean  @default(false)
}

model Billing {
  id          String    @id @default(cuid())
  amount      Float
  status      String    // 'draft', 'pending', 'paid', 'overdue'
  dueDate     DateTime
  paidAt      DateTime?
  description String?   @db.Text
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  template    BillingTemplate? @relation(fields: [templateId], references: [id])
  templateId  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BillingTemplate {
  id          String    @id @default(cuid())
  name        String
  amount      Float
  description String?   @db.Text
  createdBy   User      @relation("CreatedTemplates", fields: [userId], references: [id])
  userId      String
  bills       Billing[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

